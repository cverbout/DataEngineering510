# -*- coding: utf-8 -*-
"""DataIntegration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12C7_i2VIkoOBPDTGWyzQcXTgBrJdjpe0
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# ! gdown 18UD2EGKwq3YjVMBPsS8kVz0e671p7vzV
# ! gdown 1xAWZ_tEjEAFsosCdax78lrWkLnUgoWSn
# 
# import pandas as pd
# 
# covid_df = pd.read_csv("/content/COVID_county_data.csv")
# census_df = pd.read_csv("/content/acs2017_census_tract_data.csv")

census_df.columns

census_df = census_df[['TractId', 'State', 'County', 'TotalPop', 'IncomePerCap', 'Poverty']]
census_df.head()

def process_acs_data(data):

    data = data.groupby(['State', 'County']).agg({
      'TotalPop': 'sum',
      'IncomePerCap': 'mean',
      'Poverty': 'mean'
    }).reset_index()
    data['ID'] = range(1, len(data) + 1)

    return data

county_info = process_acs_data(census_df)
county_info = county_info.reset_index()
county_info['County'] = county_info['County'].str.replace(' County', '')
county_info['County'] = county_info['County'].str.replace(' Parish', '')
county_info.head()

def get_pop_pov_pci(data, county, state):
    return data[(data['County'] == county) & (data['State'] == state)]

loudan = get_pop_pov_pci(county_info, 'Loudoun', 'Virginia')
loudan

washington = get_pop_pov_pci(county_info, 'Washington', 'Oregon')
washington

harlan = get_pop_pov_pci(county_info, 'Harlan', 'Kentucky')
harlan

malheur = get_pop_pov_pci(county_info, 'Malheur', 'Oregon')
malheur

most_populous_county = county_info[county_info['TotalPop'] == county_info['TotalPop'].max()]
least_populous_county = county_info[county_info['TotalPop'] == county_info['TotalPop'].min()]

print("Most populous county in the USA:\n", most_populous_county)
print("Least populous county in the USA:\n", least_populous_county)

covid_df.head()

covid_df['date'] = pd.to_datetime(covid_df['date'])
covid_df['month'] = covid_df['date'].dt.to_period('M')
COVID_monthly = covid_df.groupby(['month', 'county', 'state', 'fips']).agg({
    'cases': 'sum',
    'deaths': 'sum'
}).reset_index()

COVID_monthly = pd.merge(COVID_monthly, county_info, how='left', left_on=['county', 'state'], right_on=['County', 'State'])

COVID_monthly = COVID_monthly[['month', 'county', 'state', 'fips', 'cases', 'deaths', 'ID']]
COVID_monthly['ID'] = COVID_monthly['ID'].astype('Int64')
COVID_monthly = COVID_monthly.dropna()
COVID_monthly.head()

COVID_monthly[(COVID_monthly['county'] == 'Malheur') &
 ((COVID_monthly['month'] == '2020-08') |
  (COVID_monthly['month'] == '2021-01') |
   (COVID_monthly['month'] == '2021-02'))]

total_covid_data = COVID_monthly.groupby('ID').agg({
    'cases': 'sum',
    'deaths': 'sum'
})

COVID_summary = pd.merge(county_info, total_covid_data, how='left', left_on='ID', right_on='ID')
COVID_summary['TotalCasesPer100K'] = (COVID_summary['cases'] / COVID_summary['TotalPop']) * 100000
COVID_summary['TotalDeathsPer100K'] = (COVID_summary['deaths'] / COVID_summary['TotalPop']) * 100000

COVID_summary = COVID_summary[['ID', 'County', 'State', 'TotalPop', 'Poverty', 'IncomePerCap', 'cases', 'deaths', 'TotalCasesPer100K', 'TotalDeathsPer100K']]
COVID_summary.rename(columns={
    'IncomePerCap': 'PerCapitaIncome',
    'cases': 'TotalCases',
    'deaths': 'TotalDeaths'
})

COVID_summary.head()

def get_pov_tcp100(county, state):
  return COVID_summary[(COVID_summary['County'] == county) & (COVID_summary['State'] == state)]

get_pov_tcp100('Washington', 'Oregon')

get_pov_tcp100('Malheur', 'Oregon')

get_pov_tcp100('Loudoun', 'Virginia')

get_pov_tcp100('Harlan', 'Kentucky')